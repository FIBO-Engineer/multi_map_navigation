<launch>
  <master auto="start"/>

  <!-- Launch MongoDB map server. Note: All the maps must be preloaded into the Database -->
  <include file="$(find multi_map_navigation)/launch/setup/mongodb_server.launch">
    <arg name="host" value="localhost"/>
    <arg name="port" value="27017"/>
    <arg name="db_overwrite" value="true"/>
    <arg name="db_location" value="warehouse_data"/>
  </include>

  <!-- Use the following group as a template for spawning multiple robots. Note: You should put your config files inside /config/robot# -->


  <group ns="robot0">

    <!-- Name - Must be consistent with spawn name [To edit]:  -->
    <!-- |||||||||||||||||||||||||||||||| -->
    <arg name="modelName" value="robot0"/>
    <!-- |||||||||||||||||||||||||||||||| -->



    <!-- Launch elevator manager -->
    <node pkg="multi_map_navigation" type="elevator_manager.py" name="elevator_blast" output="screen"/>

    <param name="tf_prefix" value="$(arg modelName)" />

    <!-- Launch map_store with MongoDB contents -->
    <include file="$(find multi_map_navigation)/launch/setup/map_store.launch">
      <arg name="frame_id_ref" value="$(arg modelName)/map"/>
    </include>


    <!-- Move base: -->

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

      <!-- <remap from="cmd_vel" to="/$(arg modelName)/cmd_vel"/> -->
      <remap from="map" to="map_store_map"/>

      <rosparam file="$(find mdr_2dnav)/ros/config/dwa/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find mdr_2dnav)/ros/config/dwa/costmap_common_params.yaml" command="load" ns="local_costmap" />

      <rosparam file="$(find mdr_2dnav)/ros/config/dwa/local_costmap_params.yaml" command="load" />
      
      <rosparam file="$(find mdr_2dnav)/ros/config/dwa/global_costmap_params.yaml" command="load" />
      
      <!-- <rosparam file="$(find mdr_2dnav)/ros/config/base_local_planner_params.yaml" command="load" /> -->
      <rosparam file="$(find mdr_2dnav)/ros/config/dwa/move_base_params.yaml" command="load" /> 


    <param name="controller_frequency" value="20.0" />

    </node>


    <node pkg="multi_map_navigation" type="multi_map_navigation_manager.py" name="multi_map_navigation" output="screen">
      <param name="definition_file" value="$(find multi_map_navigation)/yaml/map_description.yaml" />

      <param name="transition_types" value="elevator_blast" />

      <param name="robot_namespace" value="$(arg modelName)"/>
      <param name="base_frame" value="base_link"/>

    </node>

    <!-- AMCL: -->
    
    <!-- <include file="$(find mdr_2dnav)/ros/launch/amcl.launch">
      <arg name="botName" value="$(arg modelName)"/> 
    </include>  -->

    <include file="$(find mdr_2dnav)/ros/launch/amcl.launch">
    </include>

  </group>
  
  <!-- Setup RVIZ Mux: -->
  <node name="namespace_mux" pkg="namespace_mux" type="namespace_mux" output="screen">

    <rosparam param="/namespace_mux/robot_namespace_ref">"robot"</rosparam>
    <rosparam param="/namespace_mux/rviz_namespace">"rviz"</rosparam>

    <rosparam param="/namespace_mux/active_bots">[
      "robot0"
      ]</rosparam>

    <rosparam param="/namespace_mux/subscribed_topics">[
      "/map_store_map",
      "/odom", 
      "/laser/merged",
      "/laser/scan_back",
      "/laser/scan_front",
      "/move_base/local_costmap/obstacle_layer_footprint/footprint_stamped",
      "/move_base/TrajectoryPlannerROS/local_plan",
      "/move_base/local_costmap/costmap",
      "/move_base/TrajectoryPlannerROS/global_plan",
      "/wormhole_marker",
      "/waiting_area_marker",
      "/particlecloud"
      ]</rosparam>

    <rosparam param="/namespace_mux/published_topics">[
      "/cmd_vel",
      "/initialpose",
      "/move_base_simple/goal",
      "/clicked_point"
      ]</rosparam>

  </node>

  <!-- Setup Fake Map-Frame ID -->
  <node name="fake_tf_broadcaster" pkg="namespace_mux" type="fake_tf_broadcaster" output="screen">

    <rosparam param="/fake_tf_broadcaster/pub_freq">50</rosparam>
    <rosparam param="/fake_tf_broadcaster/input_curr_frame_ids">["robot0/map", "robot1/map"]</rosparam>
    <rosparam param="/fake_tf_broadcaster/output_fake_frame_ids">["rviz/map"]</rosparam>
    <rosparam param="/fake_tf_broadcaster/output_tf_offset">[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</rosparam>    

  </node>

</launch>
